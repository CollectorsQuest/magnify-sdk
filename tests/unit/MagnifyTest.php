<?php

require_once dirname(__FILE__) . '/../../src/Magnify.php';
require_once dirname(__FILE__) . '/../../src/Resource.php';
require_once dirname(__FILE__) . '/../../src/Resource/Activity.php';
require_once dirname(__FILE__) . '/../../src/Resource/Content.php';
require_once dirname(__FILE__) . '/../../src/Resource/User.php';
require_once dirname(__FILE__) . '/../../src/Resource/Playlist.php';

/**
 * Test class for Magnify.
 * Generated by PHPUnit on 2012-03-28 at 14:47:30.
 */
class MagnifyTest extends PHPUnit_Framework_TestCase
{

  /**
   * @var Magnify
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new Magnify(MAGNIFY_CHANNEL, MAGNIFY_API_KEY);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * @covers Magnify::getChannel
   */
  public function testGetChannel()
  {
    $this->assertEquals(MAGNIFY_CHANNEL, $this->object->getChannel(), 'getChannel');
  }

  /**
   * @covers Magnify::getApiKey
   */
  public function testGetApiKey()
  {
    $this->assertEquals(MAGNIFY_API_KEY, $this->object->getApiKey(), 'getApiKey');
  }

  /**
   * @covers Magnify::content
   */
  public function testContent()
  {
    $content = $this->object->content;

    $this->assertInstanceOf('ContentResource', $content);
  }

  /**
   * @covers Magnify::activity
   */
  public function testActivity()
  {
    $activity = $this->object->activity;

    $this->assertInstanceOf('ActivityResource', $activity);
  }

  /**
   * @covers Magnify::user
   */
  public function testUser()
  {
    $user = $this->object->user;

    $this->assertInstanceOf('UserResource', $user);
  }

  /**
   * @covers Magnify::playlist
   */
  public function testPlaylist()
  {
    $playlist = $this->object->playlist;

    $this->assertInstanceOf('PlaylistResource', $playlist);
  }
}
